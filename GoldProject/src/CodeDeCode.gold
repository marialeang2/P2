// -----------------------
// Silvia Takahashi
// UNIVERSIDAD DE LOS ANDES
//  Coder - Decoder
//   Coder:  ReplaceForXYZ
//  Decoder: InvReplaceForXYZ
// A finite state transducer
//    Input:   xyz:W'#
//    where  x y and z are distinct
//        xyx in Aˆ3
//     W in A*
// Output:  xyz:X#
//  where X is obtained by replacing $ for all occurrences of xyz
//-----------------------
//   By default  the alphabet is A  = {'a', 't', 'c'}, it can be changed invoking the program with a string  of symbols. 
//   A  will contain all the the symbols in the parameter

using gold.**
  
         
   var  Alph  

procedure main(args:String[]) begin
 	    
 	
 	elementalStates  := {"start","error","!","#"}
	singleCombination :=('a'‥'d')
	doubleCombination := {"aa","ab","ac","ad","ba","bb","bc","bd","ca","cb","cc","cd","da","db","dc","dd"}
	tripleCombination := {"(aaa,0)","(aaa,1)"}
	states = elementalStates ∪ singleCombination ∪ doubleCombination ∪ tripleCombination
	alphabetCoderIn := ('a'‥'d') ∪ {"#","!"}
	alphabetCoderOut := ('a'‥'d') ∪ {"#","!","*"}
	start := "start"
	  

  			
	coder:= ReplaceForxyz.createTransducer(Alph)
   
   deCoder:=InvReplaceForxyz.createTransducer(Alph)
   
    
    
  //GAutomataFrame.show(coder)
  //GAutomataFrame.show(deCoder)
   
 	print "Input strings of the form xyz:W#. with x, y, over "+Alph +"and W  over   "+ Alph+"* (end with an empty string)"
 	
 	
  Utilities.testCodeDecode(coder, deCoder)
		
end


